use std

{%
    
    // project headers
    #include "./headers/alexer.h"
    #include "./headers/nob.h"

    // {fluid.setGlobal::Headers} -:> Start;
    #include <FluidLand.h>
    #include <FluidNative.h>
    // {fluid.end} <:- End;

    typedef enum {
        PUNCT_PLUS,
        PUNCT_MULT,
        PUNCT_EQUALS,
        PUNCT_OPAREN,
        PUNCT_CPAREN,
        PUNCT_OCURLY,
        PUNCT_CCURLY,
        PUNCT_SEMICOLON,
        COUNT_PUNCTS,
    } Punct_Index;

    static_assert(COUNT_PUNCTS == 8, "Amount of puncts have changed");
const char *puncts[COUNT_PUNCTS] = {
    [PUNCT_PLUS]      = "+",
    [PUNCT_MULT]      = "*",
    [PUNCT_OPAREN]    = "(",
    [PUNCT_CPAREN]    = ")",
    [PUNCT_OCURLY]    = "{",
    [PUNCT_CCURLY]    = "}",
    [PUNCT_EQUALS]    = "==",
    [PUNCT_SEMICOLON] = ";",
};

typedef enum {
    KEYWORD_IF,
    KEYWORD_RETURN,
    COUNT_KEYWORDS,
} Keyword_Index;

static_assert(COUNT_KEYWORDS == 2, "Amount of keywords have changed");
const char *keywords[COUNT_KEYWORDS] = {
    [KEYWORD_IF]     = "if",
    [KEYWORD_RETURN] = "Return",
};

const char *sl_comments[] = {
    "//",
    "#",
};

Alexer_ML_Comments ml_comments[] = {
    {"/*", "*/"},
};

    int token(Tokenize *context, index, argv, argc);
    void tokenType(Tokenize *context, token);

    void module() {
        //
    }
%}

module gpc {
    func Parse() {
        let token = {c.f("token")};
        let tokenType = {c.f("tokenType")};

        define parsingOpts({%
            #define WORDS void wordList()

            void wordList(list *context, index) {
                #define WORD_FUNC func 
                #define WORD_PRINT print
                #define WORD_MODULE module module()
            }
        %})

        {%

            int input;

            void parse() {
                // parse
                
            }
        %}
        func jit() {
            Std::_= Parser(Str[1]==>{?is func(jit) .returner{
                .var jit = {c.f.header("nob.h")};
                CModule.init({jit})
                jit {
                    CModule.translate("nob.h" >>> "nob.fluidh") then {
                        extern.createUse*mod(use "nob.fluidh");
                    }
                    nob.init();
                    nob.{c.f{%
                        // {fluid.newFile()}: self

                        #define NOB_IMPLEMENTATION
                        #include "./headers/nob.h"
                        #define BUILD_FOLDER "build/"
                        #define SRC_FOLDER   "."
                        void __fluid__({fluid.createExtern(file, self{
                            as ({file}):
                                int __fluid__::fileVar();
                                return 1;
                            as ({jitSrc}):
                                int __fluid__::jitSrcVar();
                                return 1;
                            end();
                        })})
                        int main(int argc, char **argv)
                        {
                            NOB_GO_REBUILD_URSELF(argc, argv);
                            if (!nob_mkdir_if_not_exists(BUILD_FOLDER)) return 1;
                            Nob_Cmd cmd = {0};
                            nob_cmd_append(&cmd, "cc", "-Wall", "-Wextra", "-I/usr/include/Fluid", "-o", BUILD_FOLDER"{__fluid__::fileVar}", SRC_FOLDER"__fluid__::jitSrcVar");
                            if (!nob_cmd_run_sync_and_reset(&cmd)) return 1;

                            return 0;
                            // {fluid.set} -:> Return::NobH;
                        }

                        void __fluid__::Global() {
                            // {fluid.createInterup} => self:
                                // {}: fluid.create Input as *input;
                            return __fluid__::Run();
                        }
                    %}} 
                }
            }})
        }
    }
}

use gpc
use gpc::Global(void)

gpc.parse(input)
Return::Result()